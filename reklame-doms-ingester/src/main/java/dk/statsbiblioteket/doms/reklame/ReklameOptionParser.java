package dk.statsbiblioteket.doms.reklame;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import dk.statsbiblioteket.doms.common.DefaultIngestContext;
import dk.statsbiblioteket.doms.common.DomsOptionParser;
import dk.statsbiblioteket.doms.common.IngestContext;
import dk.statsbiblioteket.doms.common.OptionParseException;
import dk.statsbiblioteket.medieplatform.doms.autogenerated.ReklameMetadata;
import dk.statsbiblioteket.util.Files;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import java.io.File;
import java.io.IOException;
import java.io.StringWriter;

/** Parse options */
public class ReklameOptionParser extends DomsOptionParser {
    private DefaultIngestContext context;

    private final Logger log = LoggerFactory.getLogger(getClass());

    public ReklameOptionParser() throws JAXBException {
        super();
        options = new Options();
        options.addOption(DomsOptionParser.FILENAME_OPTION);
        options.addOption(DomsOptionParser.URL_OPTION);
        options.addOption(DomsOptionParser.FFPROBE_LOCATION_OPTION);
        options.addOption(DomsOptionParser.FFPROBE_ERROR_LOG_LOCATION_OPTION);
        options.addOption(DomsOptionParser.REKLAME_METADATA_LOCATION_OPTION);
        for (Object option : options.getOptions()) {
            if (option instanceof Option) {
                ((Option) option).setRequired(true);
            }
        }
        options.addOption(DomsOptionParser.CONFIG_OPTION);
        options.addOption(DomsOptionParser.WSDL_OPTION);
        options.addOption(DomsOptionParser.USERNAME_OPTION);
        options.addOption(DomsOptionParser.PASSWORD_OPTION);
        options.addOption(DomsOptionParser.TEMPLATE_OPTION);
        options.addOption(DomsOptionParser.REKLAME_TEMPLATE_OPTION);
        options.addOption(DomsOptionParser.PBCORE_OPTION);

    }

    @Override
    protected synchronized IngestContext getContext() {
        if(context == null) {
            context = new ReklameIngestContext();
        }
        return context;
    }

    @Override
    protected String getHelpText() {
        return "reklameDomsIngester";
    }

    @Override
    protected void parseSpecifics(CommandLine cmd) throws OptionParseException {
        String reklametemplate = cmd.getOptionValue(REKLAME_TEMPLATE_OPTION.getOpt());
        if (reklametemplate != null) {
            ((ReklameIngestContext) getContext()).setReklameTemplatePid(reklametemplate);
        }
        String pbcore = cmd.getOptionValue(PBCORE_OPTION.getOpt());
        if (pbcore != null) {
            try {
                ((ReklameIngestContext) getContext()).setPbCoreContents(Files.loadString(new File(pbcore)));
            } catch (IOException e) {
                parseError(PBCORE_OPTION.toString());
                throw new OptionParseException(PBCORE_OPTION.toString(), e);
            }
        }

        String reklamemetadatalocation = cmd.getOptionValue(REKLAME_METADATA_LOCATION_OPTION.getOpt());
        if (reklamemetadatalocation == null) {
            parseError(REKLAME_METADATA_LOCATION_OPTION.toString());
            throw new OptionParseException(REKLAME_METADATA_LOCATION_OPTION.toString());
        }
        try {
            JAXBElement<ReklameMetadata> reklameMetadata = (JAXBElement<ReklameMetadata>) unmarshaller.unmarshal(new File(reklamemetadatalocation));
            StringWriter contents = new StringWriter();
            marshaller.marshal(reklameMetadata, contents);
            ((ReklameIngestContext) getContext()).setReklameMetadata(contents.toString());
        } catch (JAXBException e) {
            parseError(REKLAME_METADATA_LOCATION_OPTION.toString());
            throw new OptionParseException(REKLAME_METADATA_LOCATION_OPTION.toString(), e);
        }

    }

}
