package dk.statsbiblioteket.doms.vhs;

import java.io.File;
import java.io.IOException;
import java.io.StringWriter;

import dk.statsbiblioteket.doms.radiotv.RadioTVOptionParser;
import dk.statsbiblioteket.util.Files;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import dk.statsbiblioteket.doms.common.DomsOptionParser;
import dk.statsbiblioteket.doms.common.IngestContext;
import dk.statsbiblioteket.doms.common.OptionParseException;
import dk.statsbiblioteket.medieplatform.doms.autogenerated.BroadcastMetadata;
import dk.statsbiblioteket.medieplatform.doms.autogenerated.VhsMetadata;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;

/** Parse options */
public class VHSOptionParser extends DomsOptionParser {
    private VHSIngestContext context;
    private static final Option CROSSCHECK_LOCATION_OPTION
            = new Option("crosscheck", true, "The file containing the crosscheck xml-profile");

    private final Logger log = LoggerFactory.getLogger(getClass());

    public VHSOptionParser() throws JAXBException {
        super();
        options = new Options();
        options.addOption(DomsOptionParser.FILENAME_OPTION);
        options.addOption(DomsOptionParser.URL_OPTION);
        options.addOption(DomsOptionParser.FFPROBE_LOCATION_OPTION);
        options.addOption(DomsOptionParser.FFPROBE_ERROR_LOG_LOCATION_OPTION);
        options.addOption(DomsOptionParser.METADATA_LOCATION_OPTION);
        for (Object option : options.getOptions()) {
            if (option instanceof Option) {
                ((Option) option).setRequired(true);
            }
        }
        options.addOption(DomsOptionParser.CONFIG_OPTION);
        options.addOption(DomsOptionParser.USERNAME_OPTION);
        options.addOption(DomsOptionParser.PASSWORD_OPTION);
        options.addOption(DomsOptionParser.TEMPLATE_OPTION);
        options.addOption(DomsOptionParser.WSDL_OPTION);
        options.addOption(DomsOptionParser.PROGRAM_PID_OPTION);
        options.addOption(VHSOptionParser.CROSSCHECK_LOCATION_OPTION);

    }

    @Override
    protected synchronized IngestContext getContext() {
        if(context == null) {
            context = new VHSIngestContext();
        }
        return context;
    }

    @Override
    protected String getHelpText() {
        return "vhsDomsIngester";
    }

    @Override
    protected void parseMetadata(CommandLine cmd) throws OptionParseException {
        String metadataLocation = cmd.getOptionValue(METADATA_LOCATION_OPTION.getOpt());
        if (metadataLocation != null) {
            try {
                String contents = Files.loadString(new File(metadataLocation));
                getContext().setMetadataContents(contents);
            } catch (IOException e) {
                throw new OptionParseException("Failed to read file '"+metadataLocation+"'",e);
            }
        }
    }
    
    @Override
    protected void parseSpecifics(CommandLine cmd) throws OptionParseException {
        String crosscheckLocation = cmd.getOptionValue(CROSSCHECK_LOCATION_OPTION.getOpt());
        if (crosscheckLocation != null) {
            try {
                String crosscheckContents = Files.loadString(new File(crosscheckLocation));
                VHSIngestContext context = (VHSIngestContext) getContext();
                context.setCrosscheckContents(crosscheckContents);
            } catch (IOException e) {
                parseError(e.toString());
                throw new OptionParseException(e.toString());
            }
        }

        String programPid = cmd.getOptionValue(PROGRAM_PID_OPTION.getOpt());
        if (programPid != null) {
            ((VHSIngestContext) getContext()).setProgramPid(programPid);
        }
    }

}
